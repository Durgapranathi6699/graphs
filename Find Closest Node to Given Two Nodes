class Solution {
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n=edges.length;
        int dist1[]=new int[n];//distance of each node from node 1
        int dist2[]=new int[n];//distance of each node from node 2
        boolean vis1[]=new boolean[n];//for all its neighbour nodes
        boolean vis2[]=new boolean[n];
         int ans=-1;
        dfs(edges,dist1,vis1,node1);//updating distances
        dfs(edges,dist2,vis2,node2);
        int min=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
            if(vis1[i]&& vis2[i] && min>Math.max(dist1[i],dist2[i])){
                //traverse distances of node1 and node 2
                //take out max of dis1[i],dist2[i]
                //return min possible node where both nodes reach the same node
                min=Math.max(dist1[i],dist2[i]);
                ans=i;
            }
        }
        return ans;
    }
    void dfs(int[] edges,int[] dist,boolean[] vis,int node){
        vis[node]=true;
        int nei=edges[node];
        if(nei!=-1 && !vis[nei]){
            dist[nei]=dist[node]+1;
            dfs(edges,dist,vis,nei);
        }
        
    }
}
