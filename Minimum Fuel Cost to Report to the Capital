class Solution {
    int seat=0;
    long fuel=0;
    public long minimumFuelCost(int[][] roads, int seats) {
        seat=seats;
        List<List<Integer>> adj=new ArrayList<>();
        //create adjacency list to store all edges
        for(int i=0;i<=roads.length;i++){
            adj.add(new ArrayList<>());
        }
       for(int road[]:roads){
           adj.get(road[0]).add(road[1]);
           adj.get(road[1]).add(road[0]);
       }
       //dfs 
       dfs(adj,0,-1);
       return fuel;
    }
    int dfs(List<List<Integer>> adj,int cur,int prev){
        int people=1;//every node has 1 person
        for(int next:adj.get(cur)){
            if(next==prev){
               continue;//to avoid loop
            }
            people+=dfs(adj,next,cur);
        }
        if(cur!=0){
        fuel+=(long)Math.ceil((double)people/seat);//no.of people/no.of seats gives the fuel
        }
        return people;
    }
}
