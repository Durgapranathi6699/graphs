class Solution {  
    Set<Integer> vis=new HashSet<>();
    public int[] restoreArray(int[][] adjacentPairs) {
      Map<Integer,List<Integer>> adj=new HashMap<>();
        //adjacency list
      for (int[] a : adjacentPairs) {
          adj.putIfAbsent(a[0], new ArrayList<>());
          adj.putIfAbsent(a[1], new ArrayList<>());
          adj.get(a[0]).add(a[1]);
          adj.get(a[1]).add(a[0]);
         }
        //finding the starting point
       int start = 0;
       int ans[] = new int[adjacentPairs.length+1];
       for(Map.Entry<Integer,List<Integer>> e:adj.entrySet()){
           if(e.getValue().size()==1){
               start=e.getKey();
               break;
           }
       }
        //traversal
        dfs(start,adj,0,ans);
     return ans; 
    }
void dfs(int start,Map<Integer,List<Integer>> adj,int i,int ans[]){
       vis.add(start);
       ans[i]=start;
   for(int val:adj.get(start)){
        if(!vis.contains(val)){
            dfs(val,adj,i+1,ans);
        }
    }
}
}
