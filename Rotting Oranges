class Solution {
    public int orangesRotting(int[][] grid) {
         int m = grid.length;
         int n = grid[0].length;
         int fresh = 0;
        Queue<int[]> q = new LinkedList<>();
        for (int i = 0; i < m; i ++) {
            for (int j = 0; j < n; j ++) {
                if (grid[i][j] == 2) {
                    q.offer(new int[]{i, j});
                }if (grid[i][j] == 1) {
                    fresh ++;
                 }
            }
        }

        int res = 0;
        int[] r = {1, -1, 0, 0};
        int[] c = {0, 0, 1, -1};
        while (!q.isEmpty()&& fresh>0) {
            res ++;
            int size=q.size();
            for (int i =0;i<size;i++) {
                int[] p = q.poll();
                for (int j = 0; j < 4; j ++) {
                    int x = p[0] + r[j];
                    int y = p[1] + c[j];
                    if (x >= 0 && x < m && y >= 0 && y < n && grid[x][y] == 1) {
                        grid[x][y] = 2;
                       fresh --;
                        q.offer(new int[]{x, y});
                    }
                }
            }
        }

        return  fresh>0?-1:res;
    }
}
