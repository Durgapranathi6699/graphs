class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        Set<Integer> set=new HashSet<>();
          set.add(0);
       Stack<Integer> stack=new Stack<>();
        stack.push(0);
        while(!stack.isEmpty()){
            List<Integer> l=rooms.get(stack.pop());
            for(int i=0;i<l.size();i++){
                if(!set.contains(l.get(i))){
                   set.add(l.get(i));
                   stack.push(l.get(i));
              }
            }
        }
        return set.size()==rooms.size();
    }
}


//dfs solution

 if(rooms.size()==0)return true;
     boolean vis[]=new boolean[rooms.size()];
      dfs(0,rooms,vis);
       for(int i=0;i<rooms.size();i++){
           if(vis[i]==false){
               return false;
           }
       }
        return true;
    }
    public void dfs(int i,List<List<Integer>> rooms, boolean vis[]){
          vis[i]=true;
        for(int a:rooms.get(i)){
            if(vis[a]==false)  {
                dfs(a,rooms,vis);
            }
        }
